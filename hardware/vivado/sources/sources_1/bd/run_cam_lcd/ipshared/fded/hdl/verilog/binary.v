// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="binary,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=32.509200,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=1855,HLS_SYN_LUT=2943,HLS_VERSION=2018_2}" *)

module binary (
        ap_clk,
        ap_rst_n,
        img_in_TDATA,
        img_in_TVALID,
        img_in_TREADY,
        img_in_TKEEP,
        img_in_TLAST,
        img_in_TUSER,
        img_out_TDATA,
        img_out_TVALID,
        img_out_TREADY,
        img_out_TKEEP,
        img_out_TLAST,
        img_out_TUSER,
        threshold_V,
        enable
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst_n;
input  [31:0] img_in_TDATA;
input   img_in_TVALID;
output   img_in_TREADY;
input  [3:0] img_in_TKEEP;
input  [0:0] img_in_TLAST;
input  [0:0] img_in_TUSER;
output  [31:0] img_out_TDATA;
output   img_out_TVALID;
input   img_out_TREADY;
output  [3:0] img_out_TKEEP;
output  [0:0] img_out_TLAST;
output  [0:0] img_out_TUSER;
input  [7:0] threshold_V;
input   enable;

 reg    ap_rst_n_inv;
reg   [31:0] img_in_data_V_0_data_out;
wire    img_in_data_V_0_vld_in;
wire    img_in_data_V_0_vld_out;
wire    img_in_data_V_0_ack_in;
reg    img_in_data_V_0_ack_out;
reg   [31:0] img_in_data_V_0_payload_A;
reg   [31:0] img_in_data_V_0_payload_B;
reg    img_in_data_V_0_sel_rd;
reg    img_in_data_V_0_sel_wr;
wire    img_in_data_V_0_sel;
wire    img_in_data_V_0_load_A;
wire    img_in_data_V_0_load_B;
reg   [1:0] img_in_data_V_0_state;
wire    img_in_data_V_0_state_cmp_full;
reg   [3:0] img_in_keep_V_0_data_out;
wire    img_in_keep_V_0_vld_in;
wire    img_in_keep_V_0_vld_out;
wire    img_in_keep_V_0_ack_in;
reg    img_in_keep_V_0_ack_out;
reg   [3:0] img_in_keep_V_0_payload_A;
reg   [3:0] img_in_keep_V_0_payload_B;
reg    img_in_keep_V_0_sel_rd;
reg    img_in_keep_V_0_sel_wr;
wire    img_in_keep_V_0_sel;
wire    img_in_keep_V_0_load_A;
wire    img_in_keep_V_0_load_B;
reg   [1:0] img_in_keep_V_0_state;
wire    img_in_keep_V_0_state_cmp_full;
reg   [0:0] img_in_last_V_0_data_out;
wire    img_in_last_V_0_vld_in;
wire    img_in_last_V_0_vld_out;
wire    img_in_last_V_0_ack_in;
reg    img_in_last_V_0_ack_out;
reg   [0:0] img_in_last_V_0_payload_A;
reg   [0:0] img_in_last_V_0_payload_B;
reg    img_in_last_V_0_sel_rd;
reg    img_in_last_V_0_sel_wr;
wire    img_in_last_V_0_sel;
wire    img_in_last_V_0_load_A;
wire    img_in_last_V_0_load_B;
reg   [1:0] img_in_last_V_0_state;
wire    img_in_last_V_0_state_cmp_full;
reg   [0:0] img_in_user_V_0_data_out;
wire    img_in_user_V_0_vld_in;
wire    img_in_user_V_0_vld_out;
wire    img_in_user_V_0_ack_in;
reg    img_in_user_V_0_ack_out;
reg   [0:0] img_in_user_V_0_payload_A;
reg   [0:0] img_in_user_V_0_payload_B;
reg    img_in_user_V_0_sel_rd;
reg    img_in_user_V_0_sel_wr;
wire    img_in_user_V_0_sel;
wire    img_in_user_V_0_load_A;
wire    img_in_user_V_0_load_B;
reg   [1:0] img_in_user_V_0_state;
wire    img_in_user_V_0_state_cmp_full;
reg   [31:0] img_out_data_V_1_data_out;
reg    img_out_data_V_1_vld_in;
wire    img_out_data_V_1_vld_out;
wire    img_out_data_V_1_ack_in;
wire    img_out_data_V_1_ack_out;
reg   [31:0] img_out_data_V_1_payload_A;
reg   [31:0] img_out_data_V_1_payload_B;
reg    img_out_data_V_1_sel_rd;
reg    img_out_data_V_1_sel_wr;
wire    img_out_data_V_1_sel;
wire    img_out_data_V_1_load_A;
wire    img_out_data_V_1_load_B;
reg   [1:0] img_out_data_V_1_state;
wire    img_out_data_V_1_state_cmp_full;
reg   [3:0] img_out_keep_V_1_data_out;
reg    img_out_keep_V_1_vld_in;
wire    img_out_keep_V_1_vld_out;
wire    img_out_keep_V_1_ack_in;
wire    img_out_keep_V_1_ack_out;
reg   [3:0] img_out_keep_V_1_payload_A;
reg   [3:0] img_out_keep_V_1_payload_B;
reg    img_out_keep_V_1_sel_rd;
reg    img_out_keep_V_1_sel_wr;
wire    img_out_keep_V_1_sel;
wire    img_out_keep_V_1_load_A;
wire    img_out_keep_V_1_load_B;
reg   [1:0] img_out_keep_V_1_state;
wire    img_out_keep_V_1_state_cmp_full;
reg   [0:0] img_out_last_V_1_data_out;
reg    img_out_last_V_1_vld_in;
wire    img_out_last_V_1_vld_out;
wire    img_out_last_V_1_ack_in;
wire    img_out_last_V_1_ack_out;
reg   [0:0] img_out_last_V_1_payload_A;
reg   [0:0] img_out_last_V_1_payload_B;
reg    img_out_last_V_1_sel_rd;
reg    img_out_last_V_1_sel_wr;
wire    img_out_last_V_1_sel;
wire    img_out_last_V_1_load_A;
wire    img_out_last_V_1_load_B;
reg   [1:0] img_out_last_V_1_state;
wire    img_out_last_V_1_state_cmp_full;
reg   [0:0] img_out_user_V_1_data_out;
reg    img_out_user_V_1_vld_in;
wire    img_out_user_V_1_vld_out;
wire    img_out_user_V_1_ack_in;
wire    img_out_user_V_1_ack_out;
reg   [0:0] img_out_user_V_1_payload_A;
reg   [0:0] img_out_user_V_1_payload_B;
reg    img_out_user_V_1_sel_rd;
reg    img_out_user_V_1_sel_wr;
wire    img_out_user_V_1_sel;
wire    img_out_user_V_1_load_A;
wire    img_out_user_V_1_load_B;
reg   [1:0] img_out_user_V_1_state;
wire    img_out_user_V_1_state_cmp_full;
reg    img_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    img_out_TDATA_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_149_p1;
reg   [63:0] reg_155;
wire   [0:0] enable_read_read_fu_94_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_fu_138_p2;
reg   [63:0] reg_160;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state1;
reg   [31:0] img_in_data_V_tmp_reg_365;
reg   [3:0] img_in_keep_V_tmp_reg_370;
reg   [0:0] img_in_last_V_tmp_reg_375;
reg   [0:0] img_in_user_V_tmp_reg_380;
wire   [7:0] B_V_fu_202_p1;
reg   [7:0] B_V_reg_385;
wire   [63:0] tmp_6_fu_152_p1;
reg   [63:0] tmp_6_reg_390;
wire   [63:0] grp_fu_143_p2;
reg   [63:0] tmp_7_reg_395;
wire   [63:0] grp_fu_134_p2;
reg   [63:0] tmp_8_reg_400;
reg   [10:0] loc_V_reg_405;
wire    ap_CS_fsm_state8;
wire   [51:0] loc_V_1_fu_234_p1;
reg   [51:0] loc_V_1_reg_411;
wire   [31:0] img_out_data_V_tmp_fu_353_p3;
reg    ap_block_state10;
reg   [63:0] grp_fu_134_p0;
reg   [63:0] grp_fu_134_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
reg   [63:0] grp_fu_138_p1;
wire    ap_CS_fsm_state3;
reg   [31:0] grp_fu_149_p0;
wire   [31:0] tmp_2_fu_206_p1;
wire   [31:0] tmp_9_fu_216_p1;
wire   [31:0] tmp_6_fu_152_p0;
wire   [7:0] R_V_fu_182_p4;
wire   [7:0] G_V_fu_192_p4;
wire   [63:0] p_Val2_s_fu_220_p1;
wire   [53:0] tmp_1_i_i_i_fu_238_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_251_p1;
wire   [11:0] sh_assign_fu_254_p2;
wire   [10:0] tmp_3_i_i_i_fu_268_p2;
wire   [0:0] isNeg_fu_260_p3;
wire  signed [11:0] tmp_3_i_i_i_cast_fu_273_p1;
wire   [11:0] sh_assign_1_fu_277_p3;
wire  signed [31:0] sh_assign_1_cast_fu_285_p1;
wire   [53:0] tmp_5_i_i_i_cast_fu_293_p1;
wire   [112:0] tmp_1_i_i_i_cast_fu_247_p1;
wire   [112:0] tmp_5_i_i_i_fu_289_p1;
wire   [53:0] tmp_6_i_i_i_fu_297_p2;
wire   [0:0] tmp_fu_309_p3;
wire   [112:0] tmp_8_i_i_i_fu_303_p2;
wire   [7:0] tmp_10_fu_317_p1;
wire   [7:0] tmp_11_fu_321_p4;
wire   [7:0] p_Val2_4_fu_331_p3;
wire   [0:0] temp_V_fu_339_p2;
wire   [0:0] img_out_data_V_tmp_fu_353_p0;
wire   [31:0] val_assign_2_cast_ca_fu_345_p3;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 img_in_data_V_0_sel_rd = 1'b0;
#0 img_in_data_V_0_sel_wr = 1'b0;
#0 img_in_data_V_0_state = 2'd0;
#0 img_in_keep_V_0_sel_rd = 1'b0;
#0 img_in_keep_V_0_sel_wr = 1'b0;
#0 img_in_keep_V_0_state = 2'd0;
#0 img_in_last_V_0_sel_rd = 1'b0;
#0 img_in_last_V_0_sel_wr = 1'b0;
#0 img_in_last_V_0_state = 2'd0;
#0 img_in_user_V_0_sel_rd = 1'b0;
#0 img_in_user_V_0_sel_wr = 1'b0;
#0 img_in_user_V_0_state = 2'd0;
#0 img_out_data_V_1_sel_rd = 1'b0;
#0 img_out_data_V_1_sel_wr = 1'b0;
#0 img_out_data_V_1_state = 2'd0;
#0 img_out_keep_V_1_sel_rd = 1'b0;
#0 img_out_keep_V_1_sel_wr = 1'b0;
#0 img_out_keep_V_1_state = 2'd0;
#0 img_out_last_V_1_sel_rd = 1'b0;
#0 img_out_last_V_1_sel_wr = 1'b0;
#0 img_out_last_V_1_state = 2'd0;
#0 img_out_user_V_1_sel_rd = 1'b0;
#0 img_out_user_V_1_sel_wr = 1'b0;
#0 img_out_user_V_1_state = 2'd0;
#0 ap_CS_fsm = 10'd1;
end

binary_dadd_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
binary_dadd_64ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_134_p0),
    .din1(grp_fu_134_p1),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

binary_dmul_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
binary_dmul_64ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_155),
    .din1(grp_fu_138_p1),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

binary_dmul_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
binary_dmul_64ns_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_reg_390),
    .din1(64'd4603462445507809378),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

binary_sitodp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
binary_sitodp_32ndEe_U4(
    .din0(grp_fu_149_p0),
    .dout(grp_fu_149_p1)
);

binary_sitodp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
binary_sitodp_32ndEe_U5(
    .din0(tmp_6_fu_152_p0),
    .dout(tmp_6_fu_152_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((img_in_data_V_0_ack_out == 1'b1) & (img_in_data_V_0_vld_out == 1'b1))) begin
            img_in_data_V_0_sel_rd <= ~img_in_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((img_in_data_V_0_ack_in == 1'b1) & (img_in_data_V_0_vld_in == 1'b1))) begin
            img_in_data_V_0_sel_wr <= ~img_in_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_data_V_0_state <= 2'd0;
    end else begin
        if ((((img_in_data_V_0_state == 2'd2) & (img_in_data_V_0_vld_in == 1'b0)) | ((img_in_data_V_0_state == 2'd3) & (img_in_data_V_0_vld_in == 1'b0) & (img_in_data_V_0_ack_out == 1'b1)))) begin
            img_in_data_V_0_state <= 2'd2;
        end else if ((((img_in_data_V_0_state == 2'd1) & (img_in_data_V_0_ack_out == 1'b0)) | ((img_in_data_V_0_state == 2'd3) & (img_in_data_V_0_ack_out == 1'b0) & (img_in_data_V_0_vld_in == 1'b1)))) begin
            img_in_data_V_0_state <= 2'd1;
        end else if (((~((img_in_data_V_0_vld_in == 1'b0) & (img_in_data_V_0_ack_out == 1'b1)) & ~((img_in_data_V_0_ack_out == 1'b0) & (img_in_data_V_0_vld_in == 1'b1)) & (img_in_data_V_0_state == 2'd3)) | ((img_in_data_V_0_state == 2'd1) & (img_in_data_V_0_ack_out == 1'b1)) | ((img_in_data_V_0_state == 2'd2) & (img_in_data_V_0_vld_in == 1'b1)))) begin
            img_in_data_V_0_state <= 2'd3;
        end else begin
            img_in_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((img_in_keep_V_0_ack_out == 1'b1) & (img_in_keep_V_0_vld_out == 1'b1))) begin
            img_in_keep_V_0_sel_rd <= ~img_in_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((img_in_keep_V_0_ack_in == 1'b1) & (img_in_keep_V_0_vld_in == 1'b1))) begin
            img_in_keep_V_0_sel_wr <= ~img_in_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_keep_V_0_state <= 2'd0;
    end else begin
        if ((((img_in_keep_V_0_state == 2'd2) & (img_in_keep_V_0_vld_in == 1'b0)) | ((img_in_keep_V_0_state == 2'd3) & (img_in_keep_V_0_vld_in == 1'b0) & (img_in_keep_V_0_ack_out == 1'b1)))) begin
            img_in_keep_V_0_state <= 2'd2;
        end else if ((((img_in_keep_V_0_state == 2'd1) & (img_in_keep_V_0_ack_out == 1'b0)) | ((img_in_keep_V_0_state == 2'd3) & (img_in_keep_V_0_ack_out == 1'b0) & (img_in_keep_V_0_vld_in == 1'b1)))) begin
            img_in_keep_V_0_state <= 2'd1;
        end else if (((~((img_in_keep_V_0_vld_in == 1'b0) & (img_in_keep_V_0_ack_out == 1'b1)) & ~((img_in_keep_V_0_ack_out == 1'b0) & (img_in_keep_V_0_vld_in == 1'b1)) & (img_in_keep_V_0_state == 2'd3)) | ((img_in_keep_V_0_state == 2'd1) & (img_in_keep_V_0_ack_out == 1'b1)) | ((img_in_keep_V_0_state == 2'd2) & (img_in_keep_V_0_vld_in == 1'b1)))) begin
            img_in_keep_V_0_state <= 2'd3;
        end else begin
            img_in_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((img_in_last_V_0_ack_out == 1'b1) & (img_in_last_V_0_vld_out == 1'b1))) begin
            img_in_last_V_0_sel_rd <= ~img_in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((img_in_last_V_0_ack_in == 1'b1) & (img_in_last_V_0_vld_in == 1'b1))) begin
            img_in_last_V_0_sel_wr <= ~img_in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_last_V_0_state <= 2'd0;
    end else begin
        if ((((img_in_last_V_0_state == 2'd2) & (img_in_last_V_0_vld_in == 1'b0)) | ((img_in_last_V_0_state == 2'd3) & (img_in_last_V_0_vld_in == 1'b0) & (img_in_last_V_0_ack_out == 1'b1)))) begin
            img_in_last_V_0_state <= 2'd2;
        end else if ((((img_in_last_V_0_state == 2'd1) & (img_in_last_V_0_ack_out == 1'b0)) | ((img_in_last_V_0_state == 2'd3) & (img_in_last_V_0_ack_out == 1'b0) & (img_in_last_V_0_vld_in == 1'b1)))) begin
            img_in_last_V_0_state <= 2'd1;
        end else if (((~((img_in_last_V_0_vld_in == 1'b0) & (img_in_last_V_0_ack_out == 1'b1)) & ~((img_in_last_V_0_ack_out == 1'b0) & (img_in_last_V_0_vld_in == 1'b1)) & (img_in_last_V_0_state == 2'd3)) | ((img_in_last_V_0_state == 2'd1) & (img_in_last_V_0_ack_out == 1'b1)) | ((img_in_last_V_0_state == 2'd2) & (img_in_last_V_0_vld_in == 1'b1)))) begin
            img_in_last_V_0_state <= 2'd3;
        end else begin
            img_in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((img_in_user_V_0_ack_out == 1'b1) & (img_in_user_V_0_vld_out == 1'b1))) begin
            img_in_user_V_0_sel_rd <= ~img_in_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((img_in_user_V_0_ack_in == 1'b1) & (img_in_user_V_0_vld_in == 1'b1))) begin
            img_in_user_V_0_sel_wr <= ~img_in_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_in_user_V_0_state <= 2'd0;
    end else begin
        if ((((img_in_user_V_0_state == 2'd2) & (img_in_user_V_0_vld_in == 1'b0)) | ((img_in_user_V_0_state == 2'd3) & (img_in_user_V_0_vld_in == 1'b0) & (img_in_user_V_0_ack_out == 1'b1)))) begin
            img_in_user_V_0_state <= 2'd2;
        end else if ((((img_in_user_V_0_state == 2'd1) & (img_in_user_V_0_ack_out == 1'b0)) | ((img_in_user_V_0_state == 2'd3) & (img_in_user_V_0_ack_out == 1'b0) & (img_in_user_V_0_vld_in == 1'b1)))) begin
            img_in_user_V_0_state <= 2'd1;
        end else if (((~((img_in_user_V_0_vld_in == 1'b0) & (img_in_user_V_0_ack_out == 1'b1)) & ~((img_in_user_V_0_ack_out == 1'b0) & (img_in_user_V_0_vld_in == 1'b1)) & (img_in_user_V_0_state == 2'd3)) | ((img_in_user_V_0_state == 2'd1) & (img_in_user_V_0_ack_out == 1'b1)) | ((img_in_user_V_0_state == 2'd2) & (img_in_user_V_0_vld_in == 1'b1)))) begin
            img_in_user_V_0_state <= 2'd3;
        end else begin
            img_in_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((img_out_data_V_1_ack_out == 1'b1) & (img_out_data_V_1_vld_out == 1'b1))) begin
            img_out_data_V_1_sel_rd <= ~img_out_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((img_out_data_V_1_ack_in == 1'b1) & (img_out_data_V_1_vld_in == 1'b1))) begin
            img_out_data_V_1_sel_wr <= ~img_out_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_data_V_1_state <= 2'd0;
    end else begin
        if ((((img_out_data_V_1_state == 2'd2) & (img_out_data_V_1_vld_in == 1'b0)) | ((img_out_data_V_1_state == 2'd3) & (img_out_data_V_1_vld_in == 1'b0) & (img_out_data_V_1_ack_out == 1'b1)))) begin
            img_out_data_V_1_state <= 2'd2;
        end else if ((((img_out_data_V_1_state == 2'd1) & (img_out_data_V_1_ack_out == 1'b0)) | ((img_out_data_V_1_state == 2'd3) & (img_out_data_V_1_ack_out == 1'b0) & (img_out_data_V_1_vld_in == 1'b1)))) begin
            img_out_data_V_1_state <= 2'd1;
        end else if (((~((img_out_data_V_1_vld_in == 1'b0) & (img_out_data_V_1_ack_out == 1'b1)) & ~((img_out_data_V_1_ack_out == 1'b0) & (img_out_data_V_1_vld_in == 1'b1)) & (img_out_data_V_1_state == 2'd3)) | ((img_out_data_V_1_state == 2'd1) & (img_out_data_V_1_ack_out == 1'b1)) | ((img_out_data_V_1_state == 2'd2) & (img_out_data_V_1_vld_in == 1'b1)))) begin
            img_out_data_V_1_state <= 2'd3;
        end else begin
            img_out_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((img_out_keep_V_1_ack_out == 1'b1) & (img_out_keep_V_1_vld_out == 1'b1))) begin
            img_out_keep_V_1_sel_rd <= ~img_out_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((img_out_keep_V_1_ack_in == 1'b1) & (img_out_keep_V_1_vld_in == 1'b1))) begin
            img_out_keep_V_1_sel_wr <= ~img_out_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_keep_V_1_state <= 2'd0;
    end else begin
        if ((((img_out_keep_V_1_state == 2'd2) & (img_out_keep_V_1_vld_in == 1'b0)) | ((img_out_keep_V_1_state == 2'd3) & (img_out_keep_V_1_vld_in == 1'b0) & (img_out_keep_V_1_ack_out == 1'b1)))) begin
            img_out_keep_V_1_state <= 2'd2;
        end else if ((((img_out_keep_V_1_state == 2'd1) & (img_out_keep_V_1_ack_out == 1'b0)) | ((img_out_keep_V_1_state == 2'd3) & (img_out_keep_V_1_ack_out == 1'b0) & (img_out_keep_V_1_vld_in == 1'b1)))) begin
            img_out_keep_V_1_state <= 2'd1;
        end else if (((~((img_out_keep_V_1_vld_in == 1'b0) & (img_out_keep_V_1_ack_out == 1'b1)) & ~((img_out_keep_V_1_ack_out == 1'b0) & (img_out_keep_V_1_vld_in == 1'b1)) & (img_out_keep_V_1_state == 2'd3)) | ((img_out_keep_V_1_state == 2'd1) & (img_out_keep_V_1_ack_out == 1'b1)) | ((img_out_keep_V_1_state == 2'd2) & (img_out_keep_V_1_vld_in == 1'b1)))) begin
            img_out_keep_V_1_state <= 2'd3;
        end else begin
            img_out_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((img_out_last_V_1_ack_out == 1'b1) & (img_out_last_V_1_vld_out == 1'b1))) begin
            img_out_last_V_1_sel_rd <= ~img_out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((img_out_last_V_1_ack_in == 1'b1) & (img_out_last_V_1_vld_in == 1'b1))) begin
            img_out_last_V_1_sel_wr <= ~img_out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_last_V_1_state <= 2'd0;
    end else begin
        if ((((img_out_last_V_1_state == 2'd2) & (img_out_last_V_1_vld_in == 1'b0)) | ((img_out_last_V_1_state == 2'd3) & (img_out_last_V_1_vld_in == 1'b0) & (img_out_last_V_1_ack_out == 1'b1)))) begin
            img_out_last_V_1_state <= 2'd2;
        end else if ((((img_out_last_V_1_state == 2'd1) & (img_out_last_V_1_ack_out == 1'b0)) | ((img_out_last_V_1_state == 2'd3) & (img_out_last_V_1_ack_out == 1'b0) & (img_out_last_V_1_vld_in == 1'b1)))) begin
            img_out_last_V_1_state <= 2'd1;
        end else if (((~((img_out_last_V_1_vld_in == 1'b0) & (img_out_last_V_1_ack_out == 1'b1)) & ~((img_out_last_V_1_ack_out == 1'b0) & (img_out_last_V_1_vld_in == 1'b1)) & (img_out_last_V_1_state == 2'd3)) | ((img_out_last_V_1_state == 2'd1) & (img_out_last_V_1_ack_out == 1'b1)) | ((img_out_last_V_1_state == 2'd2) & (img_out_last_V_1_vld_in == 1'b1)))) begin
            img_out_last_V_1_state <= 2'd3;
        end else begin
            img_out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((img_out_user_V_1_ack_out == 1'b1) & (img_out_user_V_1_vld_out == 1'b1))) begin
            img_out_user_V_1_sel_rd <= ~img_out_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((img_out_user_V_1_ack_in == 1'b1) & (img_out_user_V_1_vld_in == 1'b1))) begin
            img_out_user_V_1_sel_wr <= ~img_out_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        img_out_user_V_1_state <= 2'd0;
    end else begin
        if ((((img_out_user_V_1_state == 2'd2) & (img_out_user_V_1_vld_in == 1'b0)) | ((img_out_user_V_1_state == 2'd3) & (img_out_user_V_1_vld_in == 1'b0) & (img_out_user_V_1_ack_out == 1'b1)))) begin
            img_out_user_V_1_state <= 2'd2;
        end else if ((((img_out_user_V_1_state == 2'd1) & (img_out_user_V_1_ack_out == 1'b0)) | ((img_out_user_V_1_state == 2'd3) & (img_out_user_V_1_ack_out == 1'b0) & (img_out_user_V_1_vld_in == 1'b1)))) begin
            img_out_user_V_1_state <= 2'd1;
        end else if (((~((img_out_user_V_1_vld_in == 1'b0) & (img_out_user_V_1_ack_out == 1'b1)) & ~((img_out_user_V_1_ack_out == 1'b0) & (img_out_user_V_1_vld_in == 1'b1)) & (img_out_user_V_1_state == 2'd3)) | ((img_out_user_V_1_state == 2'd1) & (img_out_user_V_1_ack_out == 1'b1)) | ((img_out_user_V_1_state == 2'd2) & (img_out_user_V_1_vld_in == 1'b1)))) begin
            img_out_user_V_1_state <= 2'd3;
        end else begin
            img_out_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_94_p2 == 1'd1) & (img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        B_V_reg_385 <= B_V_fu_202_p1;
        tmp_6_reg_390 <= tmp_6_fu_152_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_data_V_0_load_A == 1'b1)) begin
        img_in_data_V_0_payload_A <= img_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_data_V_0_load_B == 1'b1)) begin
        img_in_data_V_0_payload_B <= img_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        img_in_data_V_tmp_reg_365 <= img_in_data_V_0_data_out;
        img_in_keep_V_tmp_reg_370 <= img_in_keep_V_0_data_out;
        img_in_last_V_tmp_reg_375 <= img_in_last_V_0_data_out;
        img_in_user_V_tmp_reg_380 <= img_in_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_keep_V_0_load_A == 1'b1)) begin
        img_in_keep_V_0_payload_A <= img_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_keep_V_0_load_B == 1'b1)) begin
        img_in_keep_V_0_payload_B <= img_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_last_V_0_load_A == 1'b1)) begin
        img_in_last_V_0_payload_A <= img_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_last_V_0_load_B == 1'b1)) begin
        img_in_last_V_0_payload_B <= img_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_user_V_0_load_A == 1'b1)) begin
        img_in_user_V_0_payload_A <= img_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((img_in_user_V_0_load_B == 1'b1)) begin
        img_in_user_V_0_payload_B <= img_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_data_V_1_load_A == 1'b1)) begin
        img_out_data_V_1_payload_A <= img_out_data_V_tmp_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_data_V_1_load_B == 1'b1)) begin
        img_out_data_V_1_payload_B <= img_out_data_V_tmp_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_keep_V_1_load_A == 1'b1)) begin
        img_out_keep_V_1_payload_A <= img_in_keep_V_tmp_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_keep_V_1_load_B == 1'b1)) begin
        img_out_keep_V_1_payload_B <= img_in_keep_V_tmp_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_last_V_1_load_A == 1'b1)) begin
        img_out_last_V_1_payload_A <= img_in_last_V_tmp_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_last_V_1_load_B == 1'b1)) begin
        img_out_last_V_1_payload_B <= img_in_last_V_tmp_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_user_V_1_load_A == 1'b1)) begin
        img_out_user_V_1_payload_A <= img_in_user_V_tmp_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if ((img_out_user_V_1_load_B == 1'b1)) begin
        img_out_user_V_1_payload_B <= img_in_user_V_tmp_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        loc_V_1_reg_411 <= loc_V_1_fu_234_p1;
        loc_V_reg_405 <= {{p_Val2_s_fu_220_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((enable_read_read_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((enable_read_read_fu_94_p2 == 1'd1) & (img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_155 <= grp_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((enable_read_read_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((enable_read_read_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_160 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_7_reg_395 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_8_reg_400 <= grp_fu_134_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_134_p0 = tmp_8_reg_400;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_134_p0 = reg_160;
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_134_p1 = reg_160;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_134_p1 = tmp_7_reg_395;
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_138_p1 = 64'd4592878986383488713;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_138_p1 = 64'd4599057925072241033;
    end else begin
        grp_fu_138_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_149_p0 = tmp_9_fu_216_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_149_p0 = tmp_2_fu_206_p1;
    end else begin
        grp_fu_149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_in_TDATA_blk_n = img_in_data_V_0_state[1'd0];
    end else begin
        img_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        img_in_data_V_0_ack_out = 1'b1;
    end else begin
        img_in_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((img_in_data_V_0_sel == 1'b1)) begin
        img_in_data_V_0_data_out = img_in_data_V_0_payload_B;
    end else begin
        img_in_data_V_0_data_out = img_in_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        img_in_keep_V_0_ack_out = 1'b1;
    end else begin
        img_in_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((img_in_keep_V_0_sel == 1'b1)) begin
        img_in_keep_V_0_data_out = img_in_keep_V_0_payload_B;
    end else begin
        img_in_keep_V_0_data_out = img_in_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        img_in_last_V_0_ack_out = 1'b1;
    end else begin
        img_in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((img_in_last_V_0_sel == 1'b1)) begin
        img_in_last_V_0_data_out = img_in_last_V_0_payload_B;
    end else begin
        img_in_last_V_0_data_out = img_in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        img_in_user_V_0_ack_out = 1'b1;
    end else begin
        img_in_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((img_in_user_V_0_sel == 1'b1)) begin
        img_in_user_V_0_data_out = img_in_user_V_0_payload_B;
    end else begin
        img_in_user_V_0_data_out = img_in_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        img_out_TDATA_blk_n = img_out_data_V_1_state[1'd1];
    end else begin
        img_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((img_out_data_V_1_sel == 1'b1)) begin
        img_out_data_V_1_data_out = img_out_data_V_1_payload_B;
    end else begin
        img_out_data_V_1_data_out = img_out_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((img_out_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        img_out_data_V_1_vld_in = 1'b1;
    end else begin
        img_out_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((img_out_keep_V_1_sel == 1'b1)) begin
        img_out_keep_V_1_data_out = img_out_keep_V_1_payload_B;
    end else begin
        img_out_keep_V_1_data_out = img_out_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((img_out_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        img_out_keep_V_1_vld_in = 1'b1;
    end else begin
        img_out_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((img_out_last_V_1_sel == 1'b1)) begin
        img_out_last_V_1_data_out = img_out_last_V_1_payload_B;
    end else begin
        img_out_last_V_1_data_out = img_out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((img_out_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        img_out_last_V_1_vld_in = 1'b1;
    end else begin
        img_out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((img_out_user_V_1_sel == 1'b1)) begin
        img_out_user_V_1_data_out = img_out_user_V_1_payload_B;
    end else begin
        img_out_user_V_1_data_out = img_out_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((img_out_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        img_out_user_V_1_vld_in = 1'b1;
    end else begin
        img_out_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((img_in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((img_out_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((img_out_user_V_1_ack_in == 1'b0) | (img_out_last_V_1_ack_in == 1'b0) | (img_out_keep_V_1_ack_in == 1'b0) | (img_out_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_V_fu_202_p1 = img_in_data_V_0_data_out[7:0];

assign G_V_fu_192_p4 = {{img_in_data_V_0_data_out[15:8]}};

assign R_V_fu_182_p4 = {{img_in_data_V_0_data_out[23:16]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = ((img_out_user_V_1_ack_in == 1'b0) | (img_out_last_V_1_ack_in == 1'b0) | (img_out_keep_V_1_ack_in == 1'b0) | (img_out_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign enable_read_read_fu_94_p2 = enable;

assign img_in_TREADY = img_in_user_V_0_state[1'd1];

assign img_in_data_V_0_ack_in = img_in_data_V_0_state[1'd1];

assign img_in_data_V_0_load_A = (img_in_data_V_0_state_cmp_full & ~img_in_data_V_0_sel_wr);

assign img_in_data_V_0_load_B = (img_in_data_V_0_state_cmp_full & img_in_data_V_0_sel_wr);

assign img_in_data_V_0_sel = img_in_data_V_0_sel_rd;

assign img_in_data_V_0_state_cmp_full = ((img_in_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign img_in_data_V_0_vld_in = img_in_TVALID;

assign img_in_data_V_0_vld_out = img_in_data_V_0_state[1'd0];

assign img_in_keep_V_0_ack_in = img_in_keep_V_0_state[1'd1];

assign img_in_keep_V_0_load_A = (img_in_keep_V_0_state_cmp_full & ~img_in_keep_V_0_sel_wr);

assign img_in_keep_V_0_load_B = (img_in_keep_V_0_state_cmp_full & img_in_keep_V_0_sel_wr);

assign img_in_keep_V_0_sel = img_in_keep_V_0_sel_rd;

assign img_in_keep_V_0_state_cmp_full = ((img_in_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign img_in_keep_V_0_vld_in = img_in_TVALID;

assign img_in_keep_V_0_vld_out = img_in_keep_V_0_state[1'd0];

assign img_in_last_V_0_ack_in = img_in_last_V_0_state[1'd1];

assign img_in_last_V_0_load_A = (img_in_last_V_0_state_cmp_full & ~img_in_last_V_0_sel_wr);

assign img_in_last_V_0_load_B = (img_in_last_V_0_state_cmp_full & img_in_last_V_0_sel_wr);

assign img_in_last_V_0_sel = img_in_last_V_0_sel_rd;

assign img_in_last_V_0_state_cmp_full = ((img_in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign img_in_last_V_0_vld_in = img_in_TVALID;

assign img_in_last_V_0_vld_out = img_in_last_V_0_state[1'd0];

assign img_in_user_V_0_ack_in = img_in_user_V_0_state[1'd1];

assign img_in_user_V_0_load_A = (img_in_user_V_0_state_cmp_full & ~img_in_user_V_0_sel_wr);

assign img_in_user_V_0_load_B = (img_in_user_V_0_state_cmp_full & img_in_user_V_0_sel_wr);

assign img_in_user_V_0_sel = img_in_user_V_0_sel_rd;

assign img_in_user_V_0_state_cmp_full = ((img_in_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign img_in_user_V_0_vld_in = img_in_TVALID;

assign img_in_user_V_0_vld_out = img_in_user_V_0_state[1'd0];

assign img_out_TDATA = img_out_data_V_1_data_out;

assign img_out_TKEEP = img_out_keep_V_1_data_out;

assign img_out_TLAST = img_out_last_V_1_data_out;

assign img_out_TUSER = img_out_user_V_1_data_out;

assign img_out_TVALID = img_out_user_V_1_state[1'd0];

assign img_out_data_V_1_ack_in = img_out_data_V_1_state[1'd1];

assign img_out_data_V_1_ack_out = img_out_TREADY;

assign img_out_data_V_1_load_A = (img_out_data_V_1_state_cmp_full & ~img_out_data_V_1_sel_wr);

assign img_out_data_V_1_load_B = (img_out_data_V_1_state_cmp_full & img_out_data_V_1_sel_wr);

assign img_out_data_V_1_sel = img_out_data_V_1_sel_rd;

assign img_out_data_V_1_state_cmp_full = ((img_out_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign img_out_data_V_1_vld_out = img_out_data_V_1_state[1'd0];

assign img_out_data_V_tmp_fu_353_p0 = enable;

assign img_out_data_V_tmp_fu_353_p3 = ((img_out_data_V_tmp_fu_353_p0[0:0] === 1'b1) ? val_assign_2_cast_ca_fu_345_p3 : img_in_data_V_tmp_reg_365);

assign img_out_keep_V_1_ack_in = img_out_keep_V_1_state[1'd1];

assign img_out_keep_V_1_ack_out = img_out_TREADY;

assign img_out_keep_V_1_load_A = (img_out_keep_V_1_state_cmp_full & ~img_out_keep_V_1_sel_wr);

assign img_out_keep_V_1_load_B = (img_out_keep_V_1_state_cmp_full & img_out_keep_V_1_sel_wr);

assign img_out_keep_V_1_sel = img_out_keep_V_1_sel_rd;

assign img_out_keep_V_1_state_cmp_full = ((img_out_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign img_out_keep_V_1_vld_out = img_out_keep_V_1_state[1'd0];

assign img_out_last_V_1_ack_in = img_out_last_V_1_state[1'd1];

assign img_out_last_V_1_ack_out = img_out_TREADY;

assign img_out_last_V_1_load_A = (img_out_last_V_1_state_cmp_full & ~img_out_last_V_1_sel_wr);

assign img_out_last_V_1_load_B = (img_out_last_V_1_state_cmp_full & img_out_last_V_1_sel_wr);

assign img_out_last_V_1_sel = img_out_last_V_1_sel_rd;

assign img_out_last_V_1_state_cmp_full = ((img_out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign img_out_last_V_1_vld_out = img_out_last_V_1_state[1'd0];

assign img_out_user_V_1_ack_in = img_out_user_V_1_state[1'd1];

assign img_out_user_V_1_ack_out = img_out_TREADY;

assign img_out_user_V_1_load_A = (img_out_user_V_1_state_cmp_full & ~img_out_user_V_1_sel_wr);

assign img_out_user_V_1_load_B = (img_out_user_V_1_state_cmp_full & img_out_user_V_1_sel_wr);

assign img_out_user_V_1_sel = img_out_user_V_1_sel_rd;

assign img_out_user_V_1_state_cmp_full = ((img_out_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign img_out_user_V_1_vld_out = img_out_user_V_1_state[1'd0];

assign isNeg_fu_260_p3 = sh_assign_fu_254_p2[32'd11];

assign loc_V_1_fu_234_p1 = p_Val2_s_fu_220_p1[51:0];

assign p_Val2_4_fu_331_p3 = ((isNeg_fu_260_p3[0:0] === 1'b1) ? tmp_10_fu_317_p1 : tmp_11_fu_321_p4);

assign p_Val2_s_fu_220_p1 = grp_fu_134_p2;

assign sh_assign_1_cast_fu_285_p1 = $signed(sh_assign_1_fu_277_p3);

assign sh_assign_1_fu_277_p3 = ((isNeg_fu_260_p3[0:0] === 1'b1) ? tmp_3_i_i_i_cast_fu_273_p1 : sh_assign_fu_254_p2);

assign sh_assign_fu_254_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_251_p1));

assign temp_V_fu_339_p2 = ((p_Val2_4_fu_331_p3 > threshold_V) ? 1'b1 : 1'b0);

assign tmp_10_fu_317_p1 = tmp_fu_309_p3;

assign tmp_11_fu_321_p4 = {{tmp_8_i_i_i_fu_303_p2[60:53]}};

assign tmp_1_i_i_i_cast_fu_247_p1 = tmp_1_i_i_i_fu_238_p4;

assign tmp_1_i_i_i_fu_238_p4 = {{{{1'd1}, {loc_V_1_reg_411}}}, {1'd0}};

assign tmp_2_fu_206_p1 = R_V_fu_182_p4;

assign tmp_3_i_i_i_cast_fu_273_p1 = $signed(tmp_3_i_i_i_fu_268_p2);

assign tmp_3_i_i_i_fu_268_p2 = (11'd1023 - loc_V_reg_405);

assign tmp_5_i_i_i_cast_fu_293_p1 = $unsigned(sh_assign_1_cast_fu_285_p1);

assign tmp_5_i_i_i_fu_289_p1 = $unsigned(sh_assign_1_cast_fu_285_p1);

assign tmp_6_fu_152_p0 = G_V_fu_192_p4;

assign tmp_6_i_i_i_fu_297_p2 = tmp_1_i_i_i_fu_238_p4 >> tmp_5_i_i_i_cast_fu_293_p1;

assign tmp_8_i_i_i_fu_303_p2 = tmp_1_i_i_i_cast_fu_247_p1 << tmp_5_i_i_i_fu_289_p1;

assign tmp_9_fu_216_p1 = B_V_reg_385;

assign tmp_fu_309_p3 = tmp_6_i_i_i_fu_297_p2[32'd53];

assign tmp_i_i_i_i_cast1_fu_251_p1 = loc_V_reg_405;

assign val_assign_2_cast_ca_fu_345_p3 = ((temp_V_fu_339_p2[0:0] === 1'b1) ? 32'd255 : 32'd0);

endmodule //binary
